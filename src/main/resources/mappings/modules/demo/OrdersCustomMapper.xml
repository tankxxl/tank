<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间,作用就是对sql进行分类化的管理,理解为sql隔离
    注意:使用mapper代理开发时，namespace有特殊作用,namespace等于mapper接口地址
 -->
<mapper namespace="com.thinkgem.jeesite.modules.demo.dao.OrdersCustomMapper">
    
    <!-- 定义查询订单关联用户的resultMap，将整个的查询结果映射到Orders中 -->
    <resultMap type="com.thinkgem.jeesite.modules.demo.entity.Orders" id="OrdersUserResultMap">
        <!-- 配置映射的订单信息 -->
        <!-- id：查询列中的唯一标识，订单信息中的唯一标识，如果多列组成唯一标识(如：一般数据库设计中的字典表 使用联合主键),
        就需要配置多个id
        column：订单信息的唯一标识列
        proerty：订单信息的唯一标识列所映射到orders中的那个属性，(假如：数据库中t_orders表中的主键为orders_id，而实体属性名称为ordersId,
        则这个配置应为<id column="orders_id" property="ordersId") />，类似Hibernate实体映射文件配置). -->
        <id column="id" property="id" />
        <result column="user_id" property="userid" />
        <result column="number" property="number" />
        <result column="createtime" property="createTime" />
        <result column="note" property="note" />
        
        <!-- 配置映射的关联用户信息 -->
        <!-- association：用于映射关联查询单个对象的信息
        property：要将关联查询的用户信息映射到Orders中的那个属性 -->
        <association property="user" javaType="com.thinkgem.jeesite.modules.demo.entity.User">
            <!-- id：关联查询用户的唯一标识
            column：指定唯一标识用户信息的列
            property：映射到user的那个属性 -->
            <id column="user_id" property="id" />
            <result column="username" property="username" />
            <result column="sex" property="sex" />
            <result column="address"  property="address" />
        </association>
    </resultMap>
    
    <!-- 查询订单，关联查询用户信息，使用resultMap实现 -->
    <select id="findOrdersUserResultMap" resultMap="OrdersUserResultMap">
        SELECT t1.*,
        	t2.username,
        	t2.sex,
        	t2.address
    	FROM
        	t_orders t1,
        	t_user t2
    	WHERE t1.user_id=t2.id
    </select>
    
    
    
    <!-- 查询订单，关联查询用户信息，自定义返回实体方式1，通过新建bean实现-->
    <select id="findOrdersUser" resultType="com.thinkgem.jeesite.modules.demo.entity.OrdersCustom">
    	SELECT t1.*,
        	t2.username,
        	t2.sex,
        	t2.address
    	FROM
        	t_orders t1,
        	t_user t2
    	WHERE t1.user_id=t2.id
    </select>
    
     <!-- 查询订单，关联查询用户信息，自定义返回实体方式2，一对一映射，使用AS语法，obj1.value1方式也可以-->
    <select id="findOrdersUser1" resultType="com.thinkgem.jeesite.modules.demo.entity.Orders">
        select 
	        t1.id AS "id", 
	        t1.user_id AS "userid",
	        t1.number AS "number",
	        t1.createtime AS "createTime", 
	        t1.note AS "note", 
	        t2.username AS "user.username", 
	        t2.sex AS "user.sex",
	        t2.address AS "user.address" 
        from 
        t_orders t1, t_user t2
        where t1.user_id = t2.id
    </select>
    
    <!-- 查询订单(关联用户)及订单明细的resultMap -->
    <resultMap type="com.thinkgem.jeesite.modules.demo.entity.Orders" id="ordersAndOrderDetailResultMap" extends="OrdersUserResultMap">
        <!-- 订单信息 -->
        <!-- 关联用户信息 -->
        <!-- 使用extends继承，不用再配置订单信息和用户信息的映射 -->
        <!-- 关联订单明细信息
        	一个订单关联查询出了多条订单明细，要使用collection映射
        	collection:对关联查询到的多条记录映射到集合中
        	property:将关联查询到的多条记录映射到orders类的哪个属性
        	ofType:指定映射的集合属性中pojo的类型 
         -->
         <collection property="orderdetails" ofType="com.thinkgem.jeesite.modules.demo.entity.OrderDetail">
             <!-- 
             	id:唯一标识
             	property:要将订单明细的唯一标识映射到com.thinkgem.jeesite.modules.demo.entity.OrderDetail的那个属性
              -->
              <id column="orderdetail_id" property="id" />
              <result column="items_id" property="itemsId" />
              <result column="items_num" property="itemsNum" />
              <result column="orders_id" property="ordersId" />
         </collection>
    </resultMap>
    <!-- 查询订单关联查询用户及订单明细 -->
    <select id="findOrdersAndOrderDetailResultMap" resultMap="ordersAndOrderDetailResultMap">
        select 
	        t1.*,
	        t2.username,
	        t2.sex,
	        t2.address,
	        t3.id orderdetail_id,
	        t3.items_id,
	        t3.items_num,
	        t3.orders_id
        from 
        	t_orders t1,
        	t_user t2,
        	t_orderdetail t3
        where
        	t1.user_id = t2.id AND t3.orders_id = t1.id
    </select>

    <!-- 查询用户即购买的商品信息的ResultMap -->
    <resultMap type="com.thinkgem.jeesite.modules.demo.entity.User" id="userAndItemsResultMap">
        <!-- 用户信息 -->
        <id column="user_id" property="id" />
        <result column="username" property="username" />
        <result column="sex" property="sex" />
        <result column="address" property="address" />
        
        <!-- 订单信息，一个用户对应多个订单，使用collection映射 -->
        <collection property="ordersList" ofType="com.thinkgem.jeesite.modules.demo.entity.Orders">
            <id column="id" property="id" />
            <result column="user_id" property="userid" />
            <result column="number" property="number" />
            <result column="createtime" property="createTime" />
            <result column="note" property="note" />
            
            <!-- 订单明细，一个订单包括 多个明细 -->
            <collection property="orderdetails" ofType="com.thinkgem.jeesite.modules.demo.entity.OrderDetail">
                <id column="orderdetail_id" property="id" />
                <result column="items_id" property="itemsId" />
                <result column="items_num" property="itemsNum" />
                <result column="orders_id" property="ordersId" />
                
                <!-- 商品信息，一个订单明细对应一个商品 -->
                <association property="items" javaType="com.thinkgem.jeesite.modules.demo.entity.Items">
                    <id column="items_id" property="id" />
                    <result column="items_name" property="itemsName" />
                    <result column="items_detail" property="detail" />
                    <result column="items_price" property="price" />
                </association>
            </collection>
        </collection>
        
    </resultMap>
    
    <!-- 查询用户及用户购买的商品信息，使用resultMap -->
    <select id="findUserAndItemsResultMap" resultMap="userAndItemsResultMap">
        Select 
       		t1.*,
	        t2.username,
	        t2.sex,
	        t2.address,
	        t3.id orderdetail_id,
	        t3.items_id,
	        t3.items_num,
	        t3.orders_id,
	        t4.itemsname items_name,
	        t4.detail items_detail,
	        t4.price items_price
	   from
	   		t_orders t1,
	   		t_user t2,
	   		t_orderdetail t3,
	   		t_items t4
	   	where
	   		t1.user_id = t2.id AND t3.orders_id = t1.id AND t3.items_id = t4.id
    </select>
    
    
    
    
    
    <!-- 查询订单关联查询用户，用户信息按需延迟加载 的 resultMap定义 -->            
	<resultMap type="com.thinkgem.jeesite.modules.demo.entity.Orders" id="ordersUserLazyLoading">
	    <!-- 对订单信息进行映射配置 -->
	    <id column="id" property="id" />
	    <result column="user_id" property="userid" />
	    <result column="number" property="number" />
	    <result column="createtime" property="createTime" />
	    <result column="note" property="note" />
	    <!-- 实现对用户信息进行延迟加载
	    	select：指定延迟加载需要执行的statement的id（是根据user_id查询用户信息的statement）
	    	column：订单信息中关联用户信息查询的列，是user_id
	    	关联查询的sql理解为：
	    	SELECT orders.*,
	    		(SELECT username FROM USER WHERE orders.user_id = user.id) username,
	    		(SELECT sex FROM USER WHERE orders.user_id = user.id) sex
	    	FROM orders   	
	     -->
	     <association property="user" javaType="com.thinkgem.jeesite.modules.demo.entity.User" select="findUserById" column="user_id" />
	</resultMap>
	
	<!-- 根据id查询用户，用于测试延迟加载 -->
	<select id="findUserById" parameterType="int" resultType="com.thinkgem.jeesite.modules.demo.entity.User">
	    select * from t_user where id=#{id}
	</select>
	
	<!-- 查询订单关联用户，用户信息延迟加载 -->
	<select id="findOrdersUserLazyLoading" resultMap="ordersUserLazyLoading">
	    select * from t_orders
	</select>
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
</mapper>